" UI Configuration
set  nu rnu
set nocompatible
filetype plugin indent on
set encoding=UTF-8
set showcmd             " show command in bottom bar
set showmatch           " highlight matching [{()}]
set wildmenu            " visual autocomplete for command menu
" Syntax 
if has("termguicolors")
    set termguicolors
endif
packadd! dracula
syntax enable
colorscheme dracula
set background=dark
set cursorcolumn
set cursorline
"let g:onedark_termcolors=256
" Space and Tab
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
set shiftwidth=4 
set smarttab
set autoindent
set smartindent     " set si
" Searching
set path+=**        " find global file in main directory
set incsearch       " search as characters are entered
set hlsearch        " highlight matches
let mapleader=" "   " Change leader key to <space> 
" Disable highlight searching
nnoremap <leader> <space> :nohlsearch<CR> 
" Auto update when file change by other editor
set autoread
set autowrite
set noswapfile
set undofile 
set nobackup
set undodir=~/.vim/undodir
au FocusGained,BufEnter * :silent! checktime " Auto update file when file has chage with other text editor
set clipboard=unnamedplus
" HTML 5 
autocmd FileType scss setl iskeyword+=@-@
" Split and move
set splitbelow
set splitright
"Max out the height of the current split
"ctrl + w _
"Max out the width of the current split
"ctrl + w |
"Normalize all split sizes, which is very handy when resizing terminal
"ctrl + w =
" Status line config
set laststatus=2
" SNIPPETS:
nnoremap ,html :-1read $HOME/.vim/basic.html<CR>3jwf>a
" Omni completion
set omnifunc=systaxcomplete#Complete
" Coc config
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"" VIM RAINBOW
let g:rainbow_active=1
let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]

